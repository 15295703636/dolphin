<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.cs.dp.ucenter.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="org.cs.dp.ucenter.domain.entity.UserEntity">
        <constructor>
            <idArg column="user_id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="user_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="user_qname" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="user_pwd" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="user_email" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="role_id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="user_statu" javaType="java.lang.Boolean" jdbcType="BIT"/>
            <arg column="user_number" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="user_tel" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="user_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
        </constructor>
    </resultMap>
    <resultMap id="ResultMapWithBLOBs" type="org.cs.dp.ucenter.domain.entity.UserEntity">
        <constructor>
            <idArg column="user_id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="user_name" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="user_qname" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="user_pwd" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="user_email" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="role_id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="user_statu" javaType="java.lang.Boolean" jdbcType="BIT"/>
            <arg column="user_number" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="user_tel" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="user_code" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="user_desc" javaType="java.lang.String" jdbcType="LONGVARCHAR"/>
        </constructor>
    </resultMap>
    <sql id="Base_Column_List">
    user_id, user_name, user_qname, user_pwd, user_email, role_id, user_statu, user_number,
    user_tel, user_code
  </sql>
    <sql id="Blob_Column_List">
    user_desc
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from user
        where user_id = #{user_id,jdbcType=INTEGER}
    </select>

    <select id="selectByUserName" parameterType="java.lang.String" resultType="org.cs.dolphin.common.base.UserInfo">
       SELECT uo.*,org.customer_id,org.org_type ,org.org_preid FROM
        (SELECT u.*, o.org_id FROM USER u
            LEFT JOIN user2org o ON u.user_id = o.user_id where user_name = #{userName,jdbcType=INTEGER}
        ) uo
        LEFT JOIN organization org ON org.org_id = uo.org_id
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where user_id = #{user_id,jdbcType=INTEGER}
  </delete>
    <insert id="insert" parameterType="org.cs.dp.ucenter.domain.entity.UserEntity">
    insert into user (user_id, user_name, user_qname, 
      user_pwd, user_email, role_id, 
      user_statu, user_number, user_tel, 
      user_code, user_desc)
    values (#{user_id,jdbcType=INTEGER}, #{user_name,jdbcType=VARCHAR}, #{user_qname,jdbcType=VARCHAR}, 
      #{user_pwd,jdbcType=VARCHAR}, #{user_email,jdbcType=VARCHAR}, #{role_id,jdbcType=INTEGER}, 
      #{user_statu,jdbcType=BIT}, #{user_number,jdbcType=VARCHAR}, #{user_tel,jdbcType=VARCHAR}, 
      #{user_code,jdbcType=VARCHAR}, #{user_desc,jdbcType=LONGVARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="org.cs.dp.ucenter.domain.entity.UserEntity">
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="user_id != null">
                user_id,
            </if>
            <if test="user_name != null">
                user_name,
            </if>
            <if test="user_qname != null">
                user_qname,
            </if>
            <if test="user_pwd != null">
                user_pwd,
            </if>
            <if test="user_email != null">
                user_email,
            </if>
            <if test="role_id != null">
                role_id,
            </if>
            <if test="user_statu != null">
                user_statu,
            </if>
            <if test="user_number != null">
                user_number,
            </if>
            <if test="user_tel != null">
                user_tel,
            </if>
            <if test="user_code != null">
                user_code,
            </if>
            <if test="user_desc != null">
                user_desc,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="user_id != null">
                #{user_id,jdbcType=INTEGER},
            </if>
            <if test="user_name != null">
                #{user_name,jdbcType=VARCHAR},
            </if>
            <if test="user_qname != null">
                #{user_qname,jdbcType=VARCHAR},
            </if>
            <if test="user_pwd != null">
                #{user_pwd,jdbcType=VARCHAR},
            </if>
            <if test="user_email != null">
                #{user_email,jdbcType=VARCHAR},
            </if>
            <if test="role_id != null">
                #{role_id,jdbcType=INTEGER},
            </if>
            <if test="user_statu != null">
                #{user_statu,jdbcType=BIT},
            </if>
            <if test="user_number != null">
                #{user_number,jdbcType=VARCHAR},
            </if>
            <if test="user_tel != null">
                #{user_tel,jdbcType=VARCHAR},
            </if>
            <if test="user_code != null">
                #{user_code,jdbcType=VARCHAR},
            </if>
            <if test="user_desc != null">
                #{user_desc,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="org.cs.dp.ucenter.domain.entity.UserEntity">
        update user
        <set>
            <if test="user_name != null">
                user_name = #{user_name,jdbcType=VARCHAR},
            </if>
            <if test="user_qname != null">
                user_qname = #{user_qname,jdbcType=VARCHAR},
            </if>
            <if test="user_pwd != null">
                user_pwd = #{user_pwd,jdbcType=VARCHAR},
            </if>
            <if test="user_email != null">
                user_email = #{user_email,jdbcType=VARCHAR},
            </if>
            <if test="role_id != null">
                role_id = #{role_id,jdbcType=INTEGER},
            </if>
            <if test="user_statu != null">
                user_statu = #{user_statu,jdbcType=BIT},
            </if>
            <if test="user_number != null">
                user_number = #{user_number,jdbcType=VARCHAR},
            </if>
            <if test="user_tel != null">
                user_tel = #{user_tel,jdbcType=VARCHAR},
            </if>
            <if test="user_code != null">
                user_code = #{user_code,jdbcType=VARCHAR},
            </if>
            <if test="user_desc != null">
                user_desc = #{user_desc,jdbcType=LONGVARCHAR},
            </if>
        </set>
        where user_id = #{user_id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="org.cs.dp.ucenter.domain.entity.UserEntity">
    update user
    set user_name = #{user_name,jdbcType=VARCHAR},
      user_qname = #{user_qname,jdbcType=VARCHAR},
      user_pwd = #{user_pwd,jdbcType=VARCHAR},
      user_email = #{user_email,jdbcType=VARCHAR},
      role_id = #{role_id,jdbcType=INTEGER},
      user_statu = #{user_statu,jdbcType=BIT},
      user_number = #{user_number,jdbcType=VARCHAR},
      user_tel = #{user_tel,jdbcType=VARCHAR},
      user_code = #{user_code,jdbcType=VARCHAR},
      user_desc = #{user_desc,jdbcType=LONGVARCHAR}
    where user_id = #{user_id,jdbcType=INTEGER}
  </update>
    <update id="updateByPrimaryKey" parameterType="org.cs.dp.ucenter.domain.entity.UserEntity">
    update user
    set user_name = #{user_name,jdbcType=VARCHAR},
      user_qname = #{user_qname,jdbcType=VARCHAR},
      user_pwd = #{user_pwd,jdbcType=VARCHAR},
      user_email = #{user_email,jdbcType=VARCHAR},
      role_id = #{role_id,jdbcType=INTEGER},
      user_statu = #{user_statu,jdbcType=BIT},
      user_number = #{user_number,jdbcType=VARCHAR},
      user_tel = #{user_tel,jdbcType=VARCHAR},
      user_code = #{user_code,jdbcType=VARCHAR}
    where user_id = #{user_id,jdbcType=INTEGER}
  </update>

 <!--   <select id="getListByOrgId" parameterType="java.lang.Integer" resultType="org.cs.dp.ucenter.domain.entity.UserEntity">
        select u.user_id,
               u.user_name,
               u.user_qname,
               u.user_pwd,
               u.user_email,
               u.role_id,
               u.user_statu,
               u.user_number,
               u.user_tel,
               u.user_code,
               u.user_desc from user2org uo
        LEFT JOIN USER u ON uo.user_id = u.user_id
        WHERE
        <![CDATA[
            0<(SELECT uo.org_id FROM user2org uo WHERE uo.org_id = #{orgId} AND uo.user_id = #{userId} )
        ]]>
        and uo.org_id = #{orgId}
    </select>-->

    <!--1.先根据当前的组织id查询到所有子节点的组织id，
    2.在关联组织用户关系表，查出用户id，
    3.在关联用户表查询用户信息-->
    <select id="getListByOrgId" parameterType="java.lang.Integer" resultType="org.cs.dp.ucenter.domain.entity.UserEntity">
        SELECT
            u.user_id,
            u.user_name,
            u.user_qname,
            u.user_pwd,
            u.user_email,
            u.role_id,
            u.user_statu,
            u.user_number,
            u.user_tel,
            u.user_code,
            u.user_desc
        FROM
            USER u
        WHERE
            user_id IN (
                SELECT uo.user_id AS res FROM
                    (SELECT org_id FROM
                            (SELECT t1.org_id, IF (
                                    find_in_set(org_preid, @pids) > 0,
                                    @pids := concat(@pids, ',', org_id),
                                    0
                                ) AS ischild
                                FROM (SELECT org_id, org_preid
                                        FROM organization t
                                        ORDER BY org_preid, org_id
                                    )t1,(SELECT @pids := #{orgId}) t2
                            ) t3
                        WHERE ischild != 0
                    ) orgId, user2org uo
                WHERE orgId.org_id = uo.org_id
            )
    </select>


</mapper>